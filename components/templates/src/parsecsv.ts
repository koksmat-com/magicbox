import { glob } from "glob";
import { readFileSync, mkdirSync, writeFileSync } from "fs";
import { join, extname } from "path";
import { cloneDeep } from "lodash";
import { executePowerShell, IResult } from "@koksmat/core";
import * as path from "path";
import * as fs from "fs";
import {parse} from 'csv-parse';

function camelize(str:string) {
  return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
    return index === 0 ? word.toLowerCase() : word.toUpperCase();
  }).replace(/\s+/g, '');
}



export const writeInterface = async (tsFile: string,data:object) => {


  const fields:string[] =   Object.keys(data);
  const values:string[] =   Object.values(data);
  

    const ts = `
    /*
    Generated by parsecsv.ts

    1. Copy the file to the parent folder

    2. Copy the following snippet into the script class:  
    
  import {inputType} from "./${tsFile.replace(".ts","").split("/").pop()}"
  import {room as itemClass} from "@koksmat/schemas"

  const item = itemClass.view
  type targetType = z.infer<typeof item>
  static mapCSV(input:inputType) : targetType {
    const target : targetType = {
    ${fields.map(field=>`${camelize(field)} : input.${field},`).join("\n")}
    }
    return target;
  }
    */

import { z } from "zod";


  const inputRecord = z.object({


  ${fields.map((field,index)=>`${field}:z.string().trim().openapi({ example: "${values[index]}" }),`).join("\n")}
})

export type inputType = z.infer<typeof inputRecord>


    `;

    writeFileSync(tsFile, ts);
  
};










const parseFile =  (filePath:string) : Promise<IResult<any>> => {
  return new Promise(async (resolve, reject) => { 
  let result : IResult<any> = {hasError:false, data:[]}


  const stream = fs.createReadStream(filePath)
  const parser = parse({delimiter: ';',autoParse:true,autoParseDate:true,to:1,columns:true}, function(err, data){
    result.data = data[0]
    stream.destroy();
  });
  stream.on("error", (err) => {
    result.hasError = true; result.errorMessage = err.message;resolve(result)})
  stream.on("close", () => {
    resolve(result)})
 

  stream.pipe(parser)


   })


}

export const parseCSV = async () => {
  const csvFiles = await glob("**/*.csv");



  for (let index = 0; index < csvFiles.length; index++) {
    const csvFile = csvFiles[index];
    let tsFile = csvFile +  ".ts"
    const fullPath = path.resolve(__dirname, csvFile.replace("src/", ""));
   
    const csv = await parseFile(fullPath);


    console.log(csv);
    writeInterface(tsFile,csv.data)
    
   
  }
};

parseCSV(); //.then().catch().finally(process.exit())
