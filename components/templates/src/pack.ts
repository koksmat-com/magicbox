import { glob } from "glob";
import { readFileSync, mkdirSync, writeFileSync } from "fs";
import { join, extname } from "path";
import { cloneDeep } from "lodash";
import { executePowerShell } from "@koksmat/core";
import * as path from "path";


function camelize(str:string) {
  return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
    return index === 0 ? word.toLowerCase() : word.toUpperCase();
  }).replace(/\s+/g, '');
}
export const packageScripts = async () => {
  const psFiles = await glob("**/index.ps1");

  for (let index = 0; index < psFiles.length; index++) {
    const psFile = psFiles[index];
    let tsFile = psFile.replace(".ps1", ".ts");
    const fullpPath = path.resolve(__dirname, psFile.replace("src/", ""));
    console.log(psFile);

    const script = `
    $parameters = (Get-Command "${fullpPath}").Parameters 


foreach ($parameter in $parameters.Keys) {
 
    $value = $parameters[$parameter]
    if ($parameter -in "Verbose", "Debug", "ErrorAction", "WarningAction", "InformationAction", "ErrorVariable", "WarningVariable", "InformationVariable", "OutVariable", "OutBuffer", "PipelineVariable", "WhatIf", "Confirm"){
        continue
    }
    write-host $parameter $value.ParameterType.Name 
    <# $currentItemName is the current item #>
}
    
    `;
    const scriptResult = await executePowerShell(script);


  
    const result = "";
    const params = scriptResult.info.map((x:string) => {
      const [name, type] = x.replace("\n","").split(" ");
      let tsType = ""
      switch (type) {
        case "String":
          tsType = "string"
          break;
          case "String[]":
            tsType = "string[]"
          break;
          case "Object":
            tsType = "any"
            break
           
        default:
          tsType = "any"
          
          break;
      }
      
      return  camelize(name) + " : " + tsType
        
      ;
    })
    const parameters = params.join(",");


    const inputParams = scriptResult.info.map((x:string) => {
      const [name, type] = x.replace("\n","").split(" ");
      let tsType = ""
      switch (type) {
        case "String":
          tsType = "string"
          break;
          case "String[]":
            tsType = "string[]"
          break;
          case "Object":
            tsType = "any"
            break
           
        default:
          tsType = "any"
          
          break;
      }
      const dollarCurly = "${"
    return  `-${name}  $${name}`
      
  })
  const map = inputParams.join(" ");
  const valuesParams = scriptResult.info.map((x:string) => {
    const [name, type] = x.replace("\n","").split(" ");
    let tsType = ""
    switch (type) {
      case "String":
        tsType = "string"
        break;
        case "String[]":
          tsType = "string[]"
        break;
        case "Object":
          tsType = "any"
          break
         
      default:
        tsType = "any"
        
        break;
    }
    const dollarCurly = "${"
  return  `\$${name} = "${dollarCurly}input.${camelize(name)}}" `
    
})
const values = valuesParams.join("\n");
    //result.raw
    console.log(result);


    // const result= {
    //     _id ,
    //     code}
    const code = "`" + readFileSync(psFile, "utf8") + "`";
    let commandsNames : string[]= []
    const indexOfCommands = code.indexOf("# Commands:")
    if (indexOfCommands >= 0) {
      const commands = code.substring(indexOfCommands).split("\n").shift()
      if (commands){
        commandsNames = commands.replace("# Commands:","").split(",").map(x =>  "'" + x.trim() + "'")
      }
    }
    let outputs : string[]= []
    const indexOfOutputs = code.indexOf("# Outputs:")
    if (indexOfOutputs >= 0) {
      const outputsCommandsText = code.substring(indexOfOutputs).split("\n").shift()
      if (outputsCommandsText){
        outputs = outputsCommandsText.replace("# Outputs:","").split(",").map(x =>  "'" + x.trim() + "'")
      }
    }
    const ts = `
    /*
    Generated by pack.ts
    */
import {IScript} from "@koksmat/powerpacks"


export interface IParameters {
  ${parameters}
}
export default class Script implements IScript{
  
  public get code() : string {
    return ${code}
  }
  public get commands() : string[] {
    return [${commandsNames}]
  }
  public get outputFiles() : string[] {
    return [${outputs}]
  }

  mapPowerShellInput(input:IParameters) : string {
     return \`${values}\`
}
get commandParameters() : string {
  return \`${map}\`
}
}
    `;

    writeFileSync(tsFile, ts);
  }
};

packageScripts(); //.then().catch().finally(process.exit())
